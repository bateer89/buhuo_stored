BEGIN
#######---------------------Step3-------------------
DECLARE today date;
DECLARE beginOfthisSeason date;
DECLARE beginOfthisSeasonvachar VARCHAR(255);
DECLARE endOfthisSeason date;
DECLARE endOfthisSeasonvachar VARCHAR(255);
#开始结束日期年份
DECLARE yearOfthisSeasonbegin VARCHAR(255);
DECLARE yearOfthisSeasonend VARCHAR(255);
##季节性商品首次补货条件
declare beforeseason int;
##季节性商品首次补货时长
declare season_week int;

declare isholiday int;
select value into isholiday from zn_param where id=6;
#######---------------------Step3-------------------
select value into beforeseason from zn_param where id=2;
select value into season_week from zn_param where id=3;

SET today=thisDay;
SET yearOfthisSeasonbegin=DATE_FORMAT(today,'%Y');
SET yearOfthisSeasonend=CAST(CAST(yearOfthisSeasonbegin AS SIGNED)+1 AS CHAR(255));
SET beginOfthisSeasonvachar=CASE WHEN 
				ISNULL((SELECT zn_season_goods.begindate FROM zn_season_goods WHERE zn_season_goods.begindate<=DATE_FORMAT(today,'%m-%d') AND 
				zn_season_goods.enddate>DATE_FORMAT(today,'%m-%d') LIMIT 1))=1
		THEN CONCAT(yearOfthisSeasonbegin,'-',(SELECT zn_season_goods.begindate FROM zn_season_goods ORDER BY zn_season_goods.begindate DESC LIMIT 1))
		ELSE CONCAT(yearOfthisSeasonbegin,'-',(SELECT zn_season_goods.begindate FROM zn_season_goods WHERE zn_season_goods.begindate<=DATE_FORMAT(today,'%m-%d') AND 
				zn_season_goods.enddate>DATE_FORMAT(today,'%m-%d') LIMIT 1))
		END;
SET endOfthisSeasonvachar=CASE WHEN 
				ISNULL((SELECT zn_season_goods.begindate FROM zn_season_goods WHERE zn_season_goods.begindate<=DATE_FORMAT(today,'%m-%d') AND 
				zn_season_goods.enddate>=DATE_FORMAT(today,'%m-%d') LIMIT 1))=1
		THEN CONCAT(yearOfthisSeasonend,'-',(SELECT zn_season_goods.begindate FROM zn_season_goods ORDER BY zn_season_goods.begindate ASC LIMIT 1))
		ELSE CONCAT(yearOfthisSeasonbegin,'-',(SELECT zn_season_goods.enddate FROM zn_season_goods WHERE zn_season_goods.begindate<=DATE_FORMAT(today,'%m-%d') AND 
				zn_season_goods.enddate>=DATE_FORMAT(today,'%m-%d') LIMIT 1))
		END;
SET beginOfthisSeason=str_to_date(beginOfthisSeasonvachar,'%Y-%m-%d');
SET endOfthisSeason=str_to_date(endOfthisSeasonvachar,'%Y-%m-%d');
#######---------------------Step3-------------------



#-------------------------------开始补货计算-------------------------



# -----季节性商品首次补货-----
# 	Step1 取出zn_goods表中seasontype=1的商品及classtype、minorder、
# minstock、closeqty、arrdate等，根据补货类别可以取出补货周期、
#	安全库存天数、到货周期。
drop table if exists tmp_season_tmp;
CREATE TABLE IF NOT EXISTS `tmp_season_tmp` (
  `goodsid` varchar(32) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '商品编码',
  `shopid` varchar(8) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '门店编码',
  `classtype` varchar(1) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '补货类型',
  `minorder` decimal(16,2) DEFAULT NULL COMMENT '最小起订量',
  `minstock` decimal(16,2) DEFAULT NULL COMMENT '最小库存数量',
  `closeqty` decimal(16,3) DEFAULT NULL COMMENT '昨日日终库存数量',
  `weekflag` char(1) CHARACTER SET utf8 DEFAULT NULL,
  `safedays` int(11) DEFAULT NULL,
  `arrivaldays` int(11) DEFAULT NULL,
  `sdate` datetime DEFAULT NULL COMMENT '更新日期时间',
  `theoritical_qty` decimal(16,2) DEFAULT NULL,
  `actual_qty` decimal(16,2) DEFAULT NULL,
   avg_qty_day decimal(16,2) DEFAULT NULL,
  KEY `index_1` (`goodsid`,`shopid`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

TRUNCATE TABLE tmp_season_tmp;

INSERT INTO tmp_season_tmp (goodsid,shopid,classtype,minorder,minstock,closeqty,
weekflag,safedays,arrivaldays,sdate)
SELECT 
zn_goods.goodsid AS goodsid,
zn_goods.shopid AS shopid,
zn_goods.classtype AS classtype,
zn_goods.minorder AS minorder,
zn_goods.minstock AS minstock,
zn_goods.closeqty AS closeqty,
zn_config.weekflag AS weekflag,#补货周期
zn_config.safedays AS safedays,#安全库存天数
zn_config.arrivaldays AS arrivaldays,#到货周期
zn_goods.sdate AS sdate
FROM zn_goods,zn_config
WHERE zn_goods.shopid=shopId AND zn_config.shopid=shopId AND zn_goods.classtype=zn_config.Classtype AND
zn_goods.seasontype=1 and zn_goods.flag=0;

##根据参数判断是否有首次补货
if isholiday=0
THEN
	delete a from tmp_season_tmp a join zn_config b on a.shopid=b.shopid
  where b.Classtype='A' and SUBSTR(b.Orderdate,(dayofweek(thisday)+5)mod 7+1,1)!='1';
end if;
# 		Step2 满足以下2个条件进行季节性商品首次季节补货：
#1：季节性商品季节开始日期>当前日期>季节性商品季节开始日期-30天
DELETE tmp_season_tmp FROM tmp_season_tmp,zn_season_goods
		WHERE tmp_season_tmp.shopid=shopId AND zn_season_goods.shopid=shopId AND
		tmp_season_tmp.goodsid=zn_season_goods.goodsid AND
		NOT (zn_season_goods.begindate>DATE_FORMAT(today,'%m-%d') AND DATE_ADD(concat(year(today),'-',zn_season_goods.begindate),INTERVAL -beforeseason day)<today);


#2：没有进行过首次补货：zn_season_across没有这条商品记录
DELETE x FROM tmp_season_tmp x,zn_season_across y
WHERE x.shopid=shopId AND y.shopid=shopId AND
x.goodsid=y.goodsid;

#			Step3 确定首次补货量：
update tmp_season_tmp a join zn_season_goods b on a.shopid=b.shopid and a.goodsid=b.goodsid set a.avg_qty_day=b.avg_qty_day;
###理论补货量=该商品前三年季节期间日销量的平均值*2周 - 当前库存
UPDATE tmp_season_tmp 
SET theoritical_qty=avg_qty_day*season_week*7-closeqty,
actual_qty=CASE WHEN (avg_qty_day*season_week*7-closeqty<minorder) THEN 0.0
											ELSE (CEILING((avg_qty_day*season_week*7-closeqty)/minorder)*minorder) END;

#理论补货量<最小订货量时不需要补货，否则需要补货。
#更新zn_goods表qty、flag、sdate字段;qty dec（16，3）default  0 ---计算生成的补货数量
#flag  char(1)   默认0 ，0—未处理，1---已补货，2---人工补货，3—季节性商品首次补货后在到货之前不在补货。
UPDATE zn_goods a,tmp_season_tmp b 
SET 
a.qty=b.actual_qty
WHERE a.shopid=shopId AND b.shopid=shopId AND
a.goodsid=b.goodsid AND b.theoritical_qty>=b.minorder; 

UPDATE zn_goods a,tmp_season_tmp b 
SET 
a.sdate=today
WHERE a.shopid=shopId AND b.shopid=shopId AND
a.goodsid=b.goodsid;

#更新zn_season_across表字段
INSERT INTO zn_season_across(shopid,goodsid,firstdate,nextdate,begindate,sdate)
SELECT 
a.shopid AS shopid,
a.goodsid AS goodsid,
thisday AS firstdate,
date_add(thisday,interval arrivaldays+1 day) AS nextdate,
b.begindate AS begindate,
thisday as sdate
FROM tmp_season_tmp a join zn_season_goods b on a.shopid=b.shopid and a.goodsid=b.goodsid
ON DUPLICATE KEY UPDATE
zn_season_across.shopid=VALUES(shopid),
zn_season_across.goodsid=VALUES(goodsid),
zn_season_across.firstdate=VALUES(firstdate),
zn_season_across.nextdate=values(nextdate),
zn_season_across.begindate=values(begindate),
zn_season_across.sdate=values(sdate);

update zn_goods a join zn_season_across b on a.shopid=shopid and b.shopid=shopid and a.goodsid=b.goodsid
set a.flag=3 where thisday<b.nextdate and a.flag=0;

END