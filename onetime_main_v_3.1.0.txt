BEGIN
 #声明变量  /日期，临时表
 DECLARE thatDay date; DECLARE thatDayEnd date;

SELECT  version()
       ,@@sql_mode;

SET sql_mode=(
SELECT  REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); ##CALL classify_new();

SET thatDayEnd=DATE_ADD(thisDay,INTERVAL 0 DAY);
SET thatDay=DATE_SUB(thisDay,INTERVAL totalWeeks*7 DAY);

SELECT  thatDay
       ,thatDayEnd;


DROP TABLE IF EXISTS tmp_onetime_tmp_1;
CREATE TABLE `tmp_onetime_tmp_1` (
`shopid`  varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`shopname`  varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`goodsid`  varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`goodsname`  varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`salevalue`  decimal(38,2) NULL DEFAULT NULL ,
`discvalue`  decimal(38,2) NULL DEFAULT NULL ,
`disc`  decimal(44,6) NULL DEFAULT NULL ,
`zlprice`  decimal(16,2) NULL DEFAULT NULL ,
`normalprice`  decimal(16,2) NULL DEFAULT NULL ,
`qty`  decimal(38,3) NULL DEFAULT NULL ,
`sdate`  date NULL DEFAULT NULL ,
`zkb`  decimal(16,2) NULL DEFAULT NULL ,
`dayNumber`  int DEFAULT 0 ,
`discDayNumber`  int DEFAULT 0 ,
INDEX `index_1` (`shopid`, `goodsid`, `zkb`) USING BTREE 
)
ENGINE=InnoDB
DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci
ROW_FORMAT=DYNAMIC;

INSERT INTO tmp_onetime_tmp_1(`shopid`,
`shopname`,
`goodsid`,
`goodsname`,
`salevalue`,
`discvalue`,
`disc`,
`zlprice`,
`normalprice`,
`qty`,
`sdate`,
`zkb`,
`dayNumber`,
`discDayNumber`)
SELECT 
x.shopid AS shopid,
x.shopname AS shopname,
x.goodsid AS goodsid,
x.goodsname AS goodsname,
SUM(x.salevalue) AS salevalue,
SUM(x.discvalue) AS discvalue,
SUM(x.salevalue)/SUM(x.salevalue+x.discvalue) AS disc,
x.zlprice AS zlprice,
x.normalprice AS normalprice,
SUM(x.qty) AS qty,
x.sdate AS sdate,
getZKB(x.zlprice,x.normalprice) AS zkb,
COUNT(x.zlprice) AS dayNumber,
COUNT(IF((x.zlprice<(getZKB(x.zlprice,x.normalprice)*x.normalprice)),1,0)) AS discDayNumber
FROM zn_dayly_sales x 
WHERE x.sdate<=thatDayEnd AND x.sdate>thatDay
GROUP BY x.shopid,x.goodsid,x.zlprice;





DROP TABLE IF EXISTS tmp_onetime_tmp_2;
CREATE TABLE `tmp_onetime_tmp_2` (
`shopid`  varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`shopname`  varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`goodsid`  varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`goodsname`  varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`salevalue`  decimal(60,2) NULL DEFAULT NULL ,
`discvalue`  decimal(60,2) NULL DEFAULT NULL ,
`disc`  decimal(65,6) NULL DEFAULT NULL ,
`normalprice`  decimal(16,2) NULL DEFAULT NULL ,
`qty`  decimal(60,3) NULL DEFAULT NULL ,
`zkb`  decimal(16,2) NULL DEFAULT NULL ,
`allDayNumber`  int,
`discDayNumber`  int,
INDEX `index_1` (`shopid`, `goodsid`) USING BTREE 
)
ENGINE=InnoDB
DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci
ROW_FORMAT=DYNAMIC;


INSERT INTO tmp_onetime_tmp_2(shopid, shopname, goodsid, goodsname, 
salevalue, discvalue, disc, normalprice, qty, zkb, allDayNumber, discDayNumber)
SELECT  y.shopid                                      AS shopid
       ,y.shopname                                    AS shopname
       ,y.goodsid                                     AS goodsid
       ,y.goodsname                                   AS goodsname
       ,SUM(y.salevalue)                              AS salevalue
       ,SUM(y.discvalue)                              AS discvalue
       ,SUM(y.salevalue)/SUM(y.salevalue+y.discvalue) AS disc
       ,y.normalprice                                 AS normalprice
       ,SUM(y.qty)                                    AS qty
       ,y.zkb                                         AS zkb
       ,SUM(y.dayNumber)                          		AS allDayNumber
       ,SUM(y.discDayNumber)                          AS discDayNumber
FROM tmp_onetime_tmp_1 y
GROUP BY  y.shopid
         ,y.goodsid
         ,y.zkb;
# 销售数量求和
DROP TABLE IF EXISTS tmp_onetime_tmp_2_1;
CREATE TABLE `tmp_onetime_tmp_2_1` (
`shopid`  varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`goodsid`  varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL ,
`dayNumberSum`  bigint(21) DEFAULT NULL ,
INDEX `index_1` (`shopid`, `goodsid`) USING BTREE 
)
ENGINE=InnoDB
DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci
ROW_FORMAT=DYNAMIC;


INSERT INTO tmp_onetime_tmp_2_1 (shopid,goodsid,dayNumberSum)
SELECT  z.shopid
       ,z.goodsid
       ,SUM(z.allDayNumber) AS dayNumberSum
FROM tmp_onetime_tmp_2 z
WHERE z.zkb<0.95 
GROUP BY  z.shopid
         ,z.goodsid;



UPDATE tmp_onetime_tmp_2 a join tmp_onetime_tmp_2_1 b on a.shopid=b.shopid AND a.goodsid=b.goodsid
SET a.allDayNumber=(totalWeeks*7-b.dayNumberSum)
WHERE a.zkb=0.95;



INSERT INTO zn_price_dms (shopid,goodsid,normalprice,disc1,disc2,band1,band2,trueprice,dms,sdate)
SELECT 
a.shopid AS shopid,
a.goodsid AS goodsid,
a.normalprice AS normalprice,
a.zkb*100 AS disc1,
CASE WHEN (a.zkb<0.95) THEN (a.zkb+0.05)*100
            ELSE 5000 END AS disc2,
a.zkb*20 AS band1,
CASE WHEN (a.zkb*20<19) THEN a.zkb*20+1
												ELSE 1000 END AS band2,
(a.salevalue/a.qty) AS trueprice,
a.qty/a.allDayNumber AS dms,  #销售数量
now() as sdate
FROM tmp_onetime_tmp_2 a
ON DUPLICATE KEY UPDATE
zn_price_dms.normalprice=VALUES(normalprice),
zn_price_dms.disc1=VALUES(disc1),
zn_price_dms.disc2=VALUES(disc2),
zn_price_dms.band1=VALUES(band1),
zn_price_dms.band2=VALUES(band2),
zn_price_dms.trueprice=VALUES(trueprice),
zn_price_dms.dms=VALUES(dms),
zn_price_dms.sdate=now();


#update xlid
update zn_price_dms,v_goods 
SET zn_price_dms.xlid=v_goods.deptid
WHERE zn_price_dms.goodsid=v_goods.goodsid;

#3、生成小类折扣与销量表zn_xl_dms初始数据
# 数据源按照类别xlid、折扣比例disc1、disc2汇总，dms_disc=sum(dms)/此小类在disc1和disc2折扣段的单品数量，dms_ori=小类在原价销售时单品的日均销量/小类单品数

		REPLACE INTO zn_xl_dms (shopid,xlid,disc1,disc2,
        dms_disc,dms_ori,sdate)
    SELECT 
        `x`.`shopid` AS `shopid`,
        #`x`.`shopname` AS `shopname`,
        `x`.`xlid` AS `xlid`,
        #`x`.`xlname` AS `xlname`,
        `x`.`disc1` AS `disc1`,
        `x`.`disc2` AS `disc2`,
        SUM(x.dms)/COUNT(x.dms) AS `dms_disc`,
        0 AS `dms_ori`,
        thisDay AS `sdate`
    FROM
        `zn_price_dms` `x`
		GROUP BY x.shopid,x.xlid,x.disc1;


		UPDATE zn_xl_dms a,zn_xl_dms b
		set a.dms_ori=b.dms_disc
		WHERE a.shopid=b.shopId and b.shopid=a.shopId and a.xlid=b.xlid and
					a.disc1<0.9 AND b.disc1=0.9;

END